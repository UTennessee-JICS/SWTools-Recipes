#!/bin/ksh

############################## standard interface to /sw tools
# Input:
#   Environment variables
#     SW_BLDDIR    current directory (PWD) minus /autofs/na1_ stuff
#     SW_ENVFILE   file to be sourced which has alternate prog environment
#                     only to be used in special circumstances
#     SW_WORKDIR   work dir that local script can use
# Output:
#   Return code of 0=success or 1=failure   or 2=job submitted
#
# Notes:
#   If this script is called from swtest, then swtest requires 
#   SW_WORKDIR to be set.  Then swtest adds a unique path to what 
#   user gave swtest (action+timestamp+build) and provides this
#   script with a uniquely valued SW_WORKDIR.  swtest will
#   automatically remove this unique workspace when retest is done.
##################################################################

# exit 3 is a signal to the sw infrastructure that this template has not 
# been updated; please delete it when ready
#exit 3

if [ -z $SW_BLDDIR ]; then
  echo "Error: SW_BLDDIR not set!"
  exit 1
else
  cd $SW_BLDDIR
fi

if [ -z $SW_ENVFILE ]; then
  ### Set Environment (do not remove this line only change what is in between)
  . ${MODULESHOME}/init/ksh
  . ${SW_BLDDIR}/remodule
  ### End Environment (do not remove this line only change what is in between)
else
  . $SW_ENVFILE
fi

############################## app specific section
#  
set -o verbose
#clear out status file since re-testing
rm -f status 


#-- Use one of the following template: in-place test or test with batch job


cd ${SW_WORKDIR}
cp ${SW_SOURCES}/${PACKAGE}/testcases/PME/JAC_production_NVE_4fs/* .


cat > ${PACKAGE}.pbs << EOF
#!/bin/bash
#PBS -N ${PACKAGE}
#PBS -j oe
#PBS -l nodes=1,walltime=01:00:00

set -o verbose
cd \$PBS_O_WORKDIR

export PATH=$SW_BLDDIR/amber14/bin:\$PATH
export AMBERHOME=$SW_BLDDIR/amber14

GPU_COUNT=1
CPU_COUNT=16

function bench_cpu {
  if [ \$CPU_COUNT -gt 0 ]; then
    echo -n "CPU code \$CPU_COUNT cores: "
    aprun -n \$CPU_COUNT pmemd.MPI -O -i mdin.CPU -o mdout.\$CPU_COUNT -inf mdinfo.\$CPU_COUNT -x mdcrd.\$CPU_COUNT -r restrt.\$CPU_COUNT
    grep "ns/day" mdinfo.\$CPU_COUNT | tail -n1
  fi
}

function bench_gpu_single {
  if [ \$GPU_COUNT -gt 0 ]; then
    echo -n "      [0] 1 x GPU: "
    export CUDA_VISIBLE_DEVICES=0
    aprun -n 1 pmemd.cuda -O -i mdin.GPU -o mdout.1GPU -inf mdinfo.1GPU -x mdcrd.1GPU -r restrt.1GPU
    grep "ns/day" mdinfo.1GPU | tail -n1
  fi
}

echo ""
echo "JAC_PRODUCTION_NVE - 23,558 atoms PME 4fs"
echo "-----------------------------------------"
echo ""

bench_cpu
sleep 10
bench_gpu_single
sleep 10

cpu=\`grep "ns/day" mdinfo.\$CPU_COUNT | tail -n1 | awk '{print \$4}'\`
gpu=\`grep "ns/day" mdinfo.\${GPU_COUNT}GPU | tail -n1 | awk '{print \$4}'\`
if [  "x\$cpu" != x ] && [ "x\$gpu" != x ]; then
  echo verified > $SW_BLDDIR/status
else
  echo unverified > $SW_BLDDIR/status
fi
chmod 664 $SW_BLDDIR/status

grep "ns/day" mdinfo.\$CPU_COUNT | tail -n1 | awk '{print "YVALUE=",\$4}' \
  | sed 's/ //g' > ${SW_BLDDIR}/speed.\${CPU_COUNT}cpu
grep "ns/day" mdinfo.\${GPU_COUNT}GPU | tail -n1 | awk '{print "YVALUE=",\$4}' \
  | sed 's/ //g' > ${SW_BLDDIR}/speed.\${GPU_COUNT}gpu

JOBID=\`echo \$PBS_JOBID | cut -d "." -f1 \`
chmod 775 ${SW_BLDDIR}/status
rm ${SW_BLDDIR}/.running
cat \${JOBID}.OU >> ${SW_BLDDIR}/test.log
cat mdinfo.\$CPU_COUNT mdinfo.\${GPU_COUNT}GPU >> ${SW_BLDDIR}/test.log
chmod 664 ${SW_BLDDIR}/test.log
EOF

#submit job and touch .running file - marker to infrastructure that
qsub ${PACKAGE}.pbs > ${SW_BLDDIR}/.running
if [ $? -ne 0 ] ; then
  echo "Error submitting job"
  rm -f .running
  exit 1
else
  echo "Job submitted"
  cat ${SW_BLDDIR}/.running
  exit 2
fi

cd ../

############################### if this far, return 0
exit 0
