#!/bin/ksh

############################## standard interface to /sw tools
# Input:
#   Environment variables
#     SW_BLDDIR    current directory (PWD) minus /autofs/na1_ stuff
#     SW_ENVFILE   file to be sourced which has alternate prog environment
#                     only to be used in special circumstances
#     SW_WORKDIR   work dir that local script can use
# Output:
#   Return code of 0=success or 1=failure   or 2=job submitted
#
# Notes:
#   If this script is called from swtest, then swtest requires 
#   SW_WORKDIR to be set.  Then swtest adds a unique path to what 
#   user gave swtest (action+timestamp+build) and provides this
#   script with a uniquely valued SW_WORKDIR.  swtest will
#   automatically remove this unique workspace when retest is done.
##################################################################

# exit 3 is a signal to the sw infrastructure that this template has not 
# been updated; please delete it when ready

if [ -z $SW_BLDDIR ]; then
  echo "Error: SW_BLDDIR not set!"
  exit 1
else
  cd $SW_BLDDIR
fi

if [ -z $SW_ENVFILE ]; then
  ### Set Environment (do not remove this line only change what is in between)
  . ${MODULESHOME}/init/ksh
  . ${SW_BLDDIR}/remodule
  ### End Environment (do not remove this line only change what is in between)
else
  . $SW_ENVFILE
fi

############################## app specific section
#  
set -o verbose
#clear out status file since re-testing
rm -f status 

cp -a ${SRCDIR}/test ${SW_WORKDIR}

cd ${SW_WORKDIR}/test

#-- Patch test.com
cat > test.com.patch << EOF
--- test.com	2016-03-03 15:40:07.621822571 -0500
+++ test.com.mod	2016-07-27 17:02:45.802834765 -0400
@@ -145,6 +145,8 @@
 if ( \$?bendir == 0 ) set cmpr = 0
 #
 if ( \$?chm_exec == 0 ) set chm_exec = \$chmexec/charmm
+
+set chm_exec="${SW_BLDDIR}/bin/charmm"
 if (! -e \$chm_exec   ) then
   echo " "
   echo " test.com> the testing target \$chm_exec does not exist."
@@ -173,7 +175,7 @@
         if ( \$?MPI_MACHINEFILE ) then
 	   set machinefile = "-machinefile \$MPI_MACHINEFILE"
         endif
-	set chm_run = "mpirun \$machinefile -np \$numpes"
+	set chm_run = "aprun -n \$numpes"
         if ( \$chm_host == alpha ) set chm_run = "d\$chm_run"
 
         # Can we separate output by process rank? (OpenMPI >= 1.3)
EOF
patch -p0 < test.com.patch

sed -i 's/setenv chmtest `pwd`/setenv chmtest ./g' test.com

cat > ${PACKAGE}.pbs << EOF
#!/bin/bash
#PBS -N ${PACKAGE}
#PBS -j oe
#PBS -l nodes=1,walltime=02:00:00

set -o verbose
cd \$PBS_O_WORKDIR

#-- Modify appname
./test.com M 8 keeps gnu output 2>&1 | tee -a ${SW_BLDDIR}/.running

#-- If more than half the tests passed, consider it verified
N_PASS=\`grep "NORMAL TERMINATION" output/*.out | wc -l\`
N_TEST=\`ls output/*.out | wc -l\`
N_HTEST=\$((\$N_TEST/2))
if [ "\$N_PASS" -ge "\$N_HTEST" ]; then
  echo "verified" > $SW_BLDDIR/status
else
  echo "unverified" > $SW_BLDDIR/status
fi
echo "\$N_PASS out of \$N_TEST tests passed" >> $SW_BLDDIR/status
chmod 664 $SW_BLDDIR/status

JOBID=\`echo \$PBS_JOBID | cut -d "." -f1 \`
cat \$PBS_JOBNAME.o\$JOBID >> ${SW_BLDDIR}/test.log
chmod 664 ${SW_BLDDIR}/test.log

rm -f ${SW_BLDDIR}/.running
EOF

#submit job and touch .running file - marker to infrastructure that
qsub ${PACKAGE}.pbs > ${SW_BLDDIR}/.running
if [ $? -ne 0 ] ; then
  echo "Error submitting job"
  rm -f .running
  exit 1
else
  echo "Job submitted"
  cat ${SW_BLDDIR}/.running
  exit 2
fi

cd ${SW_WORKDIR}

############################### if this far, return 0
exit 0
