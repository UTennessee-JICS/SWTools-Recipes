#!/bin/ksh

############################## standard interface to /sw tools
# Input:
#   Environment variables
#     SW_BLDDIR    current directory (PWD) minus /autofs/na1_ stuff
#     SW_ENVFILE   file to be sourced which has alternate prog environment
#                     only to be used in special circumstances
#     SW_WORKDIR   work dir that local script can use
# Output:
#   Return code of 0=success or 1=failure   or 2=job submitted
#
# Notes:
#   If this script is called from swtest, then swtest requires 
#   SW_WORKDIR to be set.  Then swtest adds a unique path to what 
#   user gave swtest (action+timestamp+build) and provides this
#   script with a uniquely valued SW_WORKDIR.  swtest will
#   automatically remove this unique workspace when retest is done.
##################################################################

if [ -z $SW_ENVFILE ]; then
  ### Set Environment (do not remove this line only change what is in between)
  . ${MODULESHOME}/init/ksh
  . ${SW_BLDDIR}/remodule
  ### End Environment (do not remove this line only change what is in between)
else
  . $SW_ENVFILE
fi

############################## app specific section
#  

if [ -z $SW_BLDDIR ]; then
  echo "Error: SW_BLDDIR not set!"
  exit 1
else
  cd $SW_BLDDIR
fi
set -o verbose
#clear out status file since re-testing
rm -f status 

cd $SRCDIR

# have to fix dirname in Tests/SubDirSpaces so that gcc and ld.x won't mess
# up filepath quoting
cd Tests/SubDirSpaces
ln -sf "Some(x86) Sources" SomeSources
sed -i.orig -e "s/Some(x86) Sources/SomeSources/" CMakeLists.txt
cd $SW_BLDDIR/$SRCDIR

make test |tee test.log 2>&1

testspassed=$( grep -G "% tests passed" test.log | cut -d'%' -f1 )

if [[ $testspassed -lt 99 ]]; then
  # error
  echo $testspassed % tests passed!
  echo unverified > $SW_BLDDIR/status
  exit 1
else
  echo $testspassed % tests passed!
  echo verified > $SW_BLDDIR/status
  exit 0
fi

cd ../

############################### if this far, return 0
exit 0
